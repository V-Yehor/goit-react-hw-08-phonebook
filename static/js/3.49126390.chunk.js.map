{"version":3,"file":"static/js/3.49126390.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","pages/Contacts.js"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 30px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 10px;\n  list-style: circle;\n  margin-left: 30px;\n`;\n\nexport const ListItemBtn = styled.button`\n  display: inline-block;\n  border: 1px solid grey;\n  border-radius: 5px;\n  background-color: white;\n  cursor: pointer;\n`;\n","// import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { List, ListItem, ListItemBtn } from './ContactList.styled';\nimport { deleteContact } from '../../redux/contacts/operations';\n// import { selectContacts, selectFilter } from '../../redux/contacts/selectors';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  // const stateFilter = useSelector(selectFilter);\n\n  // const visibleContacts = contacts.filter(contact => {\n  //   const hasFilteredName = contact.name\n  //     .toLowerCase()\n  //     .includes(stateFilter.toLowerCase());\n\n  //   return hasFilteredName;\n  // });\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <>\n      {contacts.length > 0 && (\n        <List>\n          {contacts.map(contact => (\n            <ListItem key={contact.id}>\n              <p>\n                {contact.name}: {contact.number}\n              </p>\n              <ListItemBtn onClick={() => handleDelete(contact.id)}>\n                Delete\n              </ListItemBtn>\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n","import { Field, Form } from 'formik';\nimport { styled } from 'styled-components';\n\nexport const FormWrapper = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 500px;\n  border: 1px solid black;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormField = styled(Field)`\n  margin-top: 10px;\n  width: 200px;\n`;\n\nexport const FormBtn = styled.button`\n  display: block;\n  width: 150px;\n  border-radius: 5px;\n  background-color: lightblue;\n  cursor: pointer;\n`;\n","import { Formik } from 'formik';\nimport {\n  FormWrapper,\n  FormField,\n  FormLabel,\n  FormBtn,\n} from './ContactForm.styled';\n\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nconst contactsSheme = Yup.object().shape({\n  name: Yup.string().required('Required'),\n  number: Yup.string().required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const conacts = useSelector(selectContacts);\n\n  const handleSubmit = value => {\n    const hasName = conacts.some(contact => contact.name === value.name);\n    if (hasName) {\n      alert(`${value.name} is already in contacts.`);\n      return;\n    } else {\n      dispatch(addContact(value));\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={contactsSheme}\n      onSubmit={(values, actions) => {\n        handleSubmit(values);\n        actions.resetForm();\n      }}\n    >\n      <FormWrapper>\n        <FormLabel>\n          Name\n          <FormField name=\"name\" />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <FormField name=\"number\" />\n        </FormLabel>\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </FormWrapper>\n    </Formik>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectIsLoading, selectError } from '../redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <div>{isLoading && !error && <b>Request in progress...</b>}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","ListItem","_templateObject2","ListItemBtn","_templateObject3","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","ContactList","dispatch","useDispatch","useSelector","_jsx","_Fragment","children","length","map","contact","_jsxs","name","number","onClick","contactId","id","deleteContact","FormWrapper","Form","FormLabel","FormField","Field","FormBtn","_templateObject4","contactsSheme","Yup","shape","required","ContactForm","conacts","Formik","initialValues","validationSchema","onSubmit","values","actions","value","some","alert","concat","addContact","resetForm","type","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}